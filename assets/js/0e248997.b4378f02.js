"use strict";(self.webpackChunkusdtweak_docs=self.webpackChunkusdtweak_docs||[]).push([[24],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=u(t),m=o,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||l;return t?i.createElement(g,r(r({ref:n},d),{},{components:t})):i.createElement(g,r({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=m;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a[c]="string"==typeof e?e:o,r[1]=a;for(var u=2;u<l;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1638:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var i=t(7462),o=(t(7294),t(4137));const l={sidebar_position:1},r="Building",a={unversionedId:"Guides/Building",id:"Guides/Building",title:"Building",description:"Requirements",source:"@site/docs/Guides/Building.md",sourceDirName:"Guides",slug:"/Guides/Building",permalink:"/usdtweak-docs/docs/Guides/Building",draft:!1,editUrl:"https://github.com/oumad/usdtweak-docs/tree/master/docs/Guides/Building.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/usdtweak-docs/docs/category/guides"},next:{title:"Open a USD file",permalink:"/usdtweak-docs/docs/Guides/OpenUsdFile"}},s={},u=[{value:"Requirements",id:"requirements",level:2},{value:"Compiling on linux",id:"compiling-on-linux",level:2},{value:"Compiling on MacOs",id:"compiling-on-macos",level:2},{value:"Compiling on Windows",id:"compiling-on-windows",level:2},{value:"Installing on Windows",id:"installing-on-windows",level:2},{value:"Creating a Windows installer",id:"creating-a-windows-installer",level:2},{value:"Compiling with your version of glfw",id:"compiling-with-your-version-of-glfw",level:2}],d={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building"},"Building"),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"The project is almost self contained and only needs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cmake.org/"},"cmake")," installed (version > 3.14)"),(0,o.kt)("li",{parentName:"ul"},"a C++14 compiler installed: MSVC 19 or 17, g++ or clang++."),(0,o.kt)("li",{parentName:"ul"},"a build of ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/PixarAnimationStudios/USD/releases/tag/v22.05"},"Universal Scene Description")," version >= 20.11. (I am not sure the USD libraries provided with maya, houdini or omniverse would work)")),(0,o.kt)("p",null,"If you managed to build USD, compiling usdtweak should be easy, cmake needs only 1 required variables:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"pxr_DIR")," pointing to the USD installation directory containing the file pxrConfig.cmake")),(0,o.kt)("h2",{id:"compiling-on-linux"},"Compiling on linux"),(0,o.kt)("p",null,"On linux it should compile with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git clone https://github.com/cpichard/usdtweak\ncd usdtweak\ngit checkout develop\nmkdir build\ncd build\ncmake -Dpxr_DIR=/installs/usd-22.05 ..\nmake\n")),(0,o.kt)("h2",{id:"compiling-on-macos"},"Compiling on MacOs"),(0,o.kt)("p",null,"It compiles on MacOs Catalina. The viewport doesn't work as the required OpenGL version is not supported, but the layer editor does."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git clone https://github.com/cpichard/usdtweak\ncd usdtweak\ngit checkout develop\nmkdir build\ncd build\ncmake -Dpxr_DIR=/installs/usd-22.05 ..\nmake\n")),(0,o.kt)("h2",{id:"compiling-on-windows"},"Compiling on Windows"),(0,o.kt)("p",null,"It should compile successfully on Windows 10 with MSVC 19 or 17 using the RelWithDbInfo config. Make sure you open/use the x64 Native Tools commands prompt before typing the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'git clone https://github.com/cpichard/usdtweak\ncd usdtweak\ngit checkout develop\nmkdir build\ncd build\ncmake  -G "Visual Studio 16 2019" -A x64 -Dpxr_DIR=C:\\installs\\usd-22.05 ..\ncmake --build . --config RelWithDebInfo\n')),(0,o.kt)("h2",{id:"installing-on-windows"},"Installing on Windows"),(0,o.kt)("p",null,"You can install usdtweak with its dependencies on windows, it copies the required files in a directory with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cmake --install . --prefix <where_you_want_to_install_usdtweak> --config RelWithDebInfo\n")),(0,o.kt)("p",null,"Note that it is not really tested on anything else than my machine/setup so it might not work for you, feel free to get in touch if you have any issue."),(0,o.kt)("h2",{id:"creating-a-windows-installer"},"Creating a Windows installer"),(0,o.kt)("p",null,"There is an experimental packaging system using cpack/NSIS on windows which creates an installer. You have to make sure the nsis application is available on you system, you can download it from here ",(0,o.kt)("a",{parentName:"p",href:"https://nsis.sourceforge.io/Download"},"NSIS"),". The command to create the installer is then:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cmake --build . --target package --config RelWithDebInfo\n")),(0,o.kt)("h2",{id:"compiling-with-your-version-of-glfw"},"Compiling with your version of glfw"),(0,o.kt)("p",null,"usdtweak is using ",(0,o.kt)("a",{parentName:"p",href:"https://www.glfw.org/"},"GLFW")," for its windowing system. cmake should normally download, compile and install glfw without any user intervention. However, if you already have a compiled version you want to use instead, and you'll need to disable the automatic build of glfw, by passing an additional cmake variable:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"glfw3_DIR")," pointing to your GLFW installation directory and containing the file glfw3Config.cmake")),(0,o.kt)("p",null,"A cmake command will then look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'cmake  -G "Visual Studio 16 2019" -A x64 -Dpxr_DIR=C:\\installs\\usd-21.11 -Dglfw3_DIR=C:\\installs\\glfw3-3.3.6\\lib\\cmake\\glfw3 ..\n')))}p.isMDXComponent=!0}}]);